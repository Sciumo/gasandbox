Geometric Algebra Sandbox

Copyright 2006 - 2007 Daniel Fontijne, University of Amsterdam
fontijne@science.uva.nl


*****************************  INTRODUCTION  ****************************

This is the GA Sandbox, which was created as companion software to the book
           Geometric Algebra  for Computer Science 
           An Object Oriented Approach to Geometry

We will abbreviate the title of the book to `GA4CS' below.

The GA Sandbox is two things:
-a comprehensive set of programming examples (and some exercises). These 
examples are discussed at the end of each chapter of GA4CS (from 
Chapter 1 through Chapter 16). 
-a library which contains five geometric algebra implementations. You
can use this library as a starting point for your own C++ geometric algebra 
programming.

The five geometric algebra implementations are:
-e2ga          2-D `Vector Space' Model (2-D algebra, Euclidean Metric)
-e3ga          3-D `Vector Space' Model (3-D algebra, Euclidean Metric)
-h3ga          3-D Homogeneous Model    (4-D algebra, Euclidean Metric)
-c2ga          2-D Conformal Model      (4-D algebra, Minkowski Metric)
-c3ga          3-D Conformal Model      (5-D algebra, Minkowski Metric)

The implementations were generated by Gaigen 2 from the .gs2 and .gp2 files
that you can find in the ./libgasandbox directory.


*****************************    LICENSE    ***************************** 

All code is released under the GPL.

*****************************  REQUIREMENTS *****************************

Platforms:

We have compiled and tested all examples on Windows, Linux and MacOSX.
On Windows, we compiled using Visual Studio .Net 2003 (projects files are 
in the vs.net directory)
On Linux and MacOSX we compiled using GNU Autotools and GCC.

Libraries:

Most examples have a simple GLUT GUI, so you'll need OpenGL and GLUT 
(of freeglut).
For some specific examples, you'll need 
-FLTK (gaigenhp example), 
-ANTLR (chap10ex3, chap12ex3) and 
-OpenCV (chap10ex3, chap11ex2, chap12ex2, chap14ex4).

See ./REQUIRED_LIBRARIES for more information.


*****************************   BUILDING    *****************************

On windows, use the supplied project files (open ./vs.net/all.sln )
On Linux / MacOSX, just do a `./configure' and `make'.
Doing a `make install' is not required. You can simply run
the examples from the source tree.
On MaxOSX you may have to use some hacks to get it working. See ./MACOSX
to see how I got it working.

*****************************    RUNNING    *****************************
 
On windows, simply set the example you want to run as the startup projects, 
and run it (CTRL-F5). 
On Linux / MacOSX, go to the directory of the example (e.g., chap2/ex1) and
run it (e.g., ./chap2ex2 )


******************** BUILDING YOUR OWN APPLICATION **********************

To use the GA Sandbox for you own applications, you should link to the library
libgasandbox.lib       or  libgasandbox.a               and to
libgasandboxparse.lib  or  libgasandboxparse.a

The source of these libraries are in the ./libgasandbox directory

libgasandbox contains the geometric algebra implementations, utility algorithms
(e.g., e3ga_util.cpp), and code for drawing geometric implementations of 
multivectors. Because of the drawing code, you'll need to link to OpenGL too.

libgasandboxparse contains code to parse multivector values. When you link to
it, also link to the ANTLR parser generator.

On Unix, do a `make install' to get the libgasandbox and headers installed.
On Windows, simply make sure the library/header path includes the right 
directories.

Header files:

You'll need to include header files from the ./libgasandbox directory as
#include <libgasandbox/xyz.h>

The functionality if the header files is:
c2ga.h                  2-D conformal algebra implementation
c2ga_draw.h             Drawing of 2-D conformal multivectors
c2ga_parse.h            Parsing 2-D conformal multivectors
c2ga_util.h             Utility algorithms for 2-D conformal algebra

c3ga.h                  3-D conformal algebra implementation
c3ga_draw.h             Drawing of 3-D conformal multivectors
c3ga_parse.h            Parsing 3-D conformal multivectors
c3ga_util.h             Utility algorithms for 3-D conformal algebra

e2ga.h                  2-D vector space algebra implementation
e2ga_draw.h             Drawing of 2-D vector space multivectors
e2ga_parse.h            Parsing 2-D vector space multivectors
e2ga_util.h             Utility algorithms for 2-D vector space algebra

e3ga.h                  3-D vector space algebra implementation
e3ga_draw.h             Drawing of 3-D vector space multivectors
e3ga_parse.h            Parsing 3-D vector space multivectors
e3ga_util.h             Utility algorithms for 3-D vector space algebra

h3ga.h                  3-D homogeneous algebra implementation
h3ga_draw.h             Drawing of 3-D homogeneous multivectors
h3ga_parse.h            Parsing 3-D homogeneous multivectors
h3ga_util.h             Utility algorithms for 3-D homogeneous algebra

mv_analyze.h            Analyzing multivector values
draw.h                  Global drawing state
c2gatoc3ga.h            Convert 2-D conformal to 3-D conformal multivectors 



*******************************   USAGE    ******************************

You can learn a lot about using the libgasandbox from the examples, or by
reading the corresponding sections of the GA4CS book.

Below is a listing of all algebras, their basis vectors, metric
types and constants.

namespace e2ga:
     Basis vectors: e1, e2
     Metric: e1.e1 = e2.e2 = 1

     General Multivector Type         (sum of basis blades):
          mv                          (1.0, e1, e2, e1^e2)

     Specialized Multivector Types    (sum of basis blades):
          scalar                      (1.0);
          e1_t                        (e1)
          e2_t                        (e2)
          vector                      (e1, e2);
          bivector                    (e1^e2);
          rotor                       (1.0, e1^e2);

     General Outermorphism Type:
          om                         
          
     Specialized Outermorphism Types  (domain/range):       
          (none)
          
     Constants:
          e1
          e2
          I2 = e1^e2; 
          I2i = inverse(e1^e2);

namespace e3ga:
     Basis vectors: e1, e2, e3
     Metric: e1.e1 = e2.e2 = e3.e3 = 1
     
     General Multivector Type         (sum of basis blades):
          mv                          (1.0, e1, e2, e3, e1^e2, e2^e3, e3^e1, e1^e2^e3)

     Specialized Multivector Types    (sum of basis blades):
          scalar                      (1.0)
          e1_t                        (e1)
          e2_t                        (e2)
          e3_t                        (e3)
          vector2D                    (e1, e2)
          vector                      (e1, e2, e3)
          bivector                    (e1^e2, e2^e3, e3^e1)
          trivector                   (e1^e2^e3)
          rotor                       (1.0, e1^e2, e2^e3, e3^e1)


     General Outermorphism Type:
          om
          
     Specialized Outermorphism Types  (domain/range):       
          (none)
          
     Constants:
          e1
          e2
          e3
          I3 = e1^e2^e3
          I3i = inverse(e1^e2^e3)

namespace h3ga:
     Basis vectors: e1, e2, e3, e0
     Metric: e1.e1 = e2.e2 = e3.e3 = e0.e0 = 1
     
     General Multivector Type         (sum of basis blades):
          mv                          (1.0, e1, e2, e3, e0, e1^e2, e2^e3, e3^e1, e1^e0, e2^e0, e3^e0, e1^e2^e3, e1^e2^e0, e2^e3^e0, e3^e1^e0, e1^e2^e3^e0)

     Specialized Multivector Types    (sum of basis blades):
          scalar                      (1.0)
          e1_t                        (e1)
          e2_t                        (e2)
          e3_t                        (e3)
          e0_t                        (e0)
          vector                      (e1, e2, e3)
          point                       (e1, e2, e3, e0)
          normalizedPoint             (e1, e2, e3, e0=1)
          line                        (e1^e2, e2^e3, e3^e1, e1^e0, e2^e0, e3^e0)
          lineAtInfinity              (e1^e2, e2^e3, e3^e1)
          bivector                    (e1^e2, e2^e3, e3^e1)
          plane                       (e1^e2^e3, e1^e2^e0, e2^e3^e0, e3^e1^e0)
          planeAtInfinity             (e1^e2^e3)


     General Outermorphism Type:
          om
          
     Specialized Outermorphism Types  (domain/range):       
	  omPoint                     (e1, e2, e3, e0);
          
     Constants:
          e1
          e2
          e3
          e0
          e0i = inverse(e0)
          I4 = e1^e2^e3^e0
          I4i = inverse(e1^e2^e3^e0)

namespace c2ga:
     Basis vectors: no, e1, e2, ni
     Metric: e1.e1 = e2.e2 = 1, no.ni = -1
          
     General Multivector Type         (sum of basis blades):
          mv                          (1.0, no, e1, e2, ni, no^e1, no^e2, e1^e2, e1^ni, e2^ni, no^ni, e1^e2^ni, no^e1^ni, no^e2^ni, no^e1^e2, no^e1^e2^ni)

     Specialized Multivector Types    (sum of basis blades):
          scalar                      (1.0)
          no_t                        (no)
          e1_t                        (e1)
          e2_t                        (e2)
          ni_t                        (ni)
          point                       (no, e1, e2, ni)
          normalizedPoint             (no = 1, e1, e2, ni)
          flatPoint                   (e1^ni, e2^ni, no^ni)
          normalizedFlatPoint         (e1^ni, e2^ni, no^ni = 1)
          pointPair                   (no^e1,    no^e2,    e1^e2,    e1^ni,    e2^ni,    no^ni)
          TRversorLog                 (e1^e2,    e1^ni,    e2^ni)
          line                        (e1^e2^ni, e1^no^ni, e2^no^ni)
          dualLine                    (e1^e2, e1^ni, e2^ni)
          circle                      (e1^e2^ni, no^e1^ni, no^e2^ni, no^e1^e2)
          freeVector                  (e1^ni, e2^ni)
          freeBivector                (e1^e2^ni)
          tangentVector               (no^e1,    no^e2,    e1^e2,    e1^ni,    e2^ni,    no^ni)
          tangentBivector             (e1^e2^ni, no^e1^ni, no^e2^ni, no^e1^e2)
          vectorE2GA                  (e1, e2)
          bivectorE2GA                (e1^e2)
          TRversor                    (1.0, e1^e2, e1^ni, e2^ni)
          TRSversor                   (1.0, e1^e2, e1^ni, e2^ni, no^ni, e1^e2^no^ni)
          evenVersor                  (1.0, no^e1, no^e2, e1^e2, e1^ni, e2^ni, no^ni, e1^e2^no^ni)
          translator                  (1.0, e1^ni, e2^ni)
          normalizedTranslator        (1.0=1, e1^ni, e2^ni)
          rotor                       (1.0, e1^e2)
          scalor                      (1.0, no^ni)

     General Outermorphism Type:
          om                         
          
     Specialized Outermorphism Types  (domain/range):       
          (none)
          
     Constants:
          no
          e1
          e2
          ni
	  e1ni = e1^ni 
	  e2ni = e2^ni 
	  noni = no^ni 
	  I2 = e1^e2
	  I4 = no^e1^e2^ni 
	  I4i = inverse(no^e1^e2^ni)
          I2i = inverse(e1^e2);
	

namespace c3ga:
     Basis vectors: no, e1, e2, e3, ni
     Metric: e1.e1 = e2.e2 = e3.e3 = 1, no.ni = -1
          
     General Multivector Type         (sum of basis blades):
          mv                          (1.0, no, e1, e2, e3, ni, no^e1, no^e2, no^e3, e1^e2, e2^e3, e3^e1, e1^ni, e2^ni, e3^ni, no^ni, e2^e3^ni, e3^e1^ni, e1^e2^ni, no^e3^ni, no^e1^ni, no^e2^ni, no^e2^e3, no^e1^e3, no^e1^e2, e1^e2^e3, e1^e2^e3^ni, no^e2^e3^ni, no^e1^ni^e3, no^e1^e2^ni, no^e1^e2^e3, no^e1^e2^e3^ni)
          
     Specialized Multivector Types    (sum of basis blades):
          scalar                      (1.0)
          no_t                        (no)
          e1_t                        (e1)
          e2_t                        (e2)
          e3_t                        (e2)
          ni_t                        (ni)
          point                       (no, e1, e2, e3, ni)
          normalizedPoint             (no=1, e1, e2, e3, ni)
          flatPoint                   (e1^ni, e2^ni, e3^ni, no^ni)
          normalizedFlatPoint         (e1^ni, e2^ni, e3^ni, no^ni=1)
          pointPair                   (no^e1, no^e2, no^e3, e1^e2, e2^e3, e3^e1, e1^ni, e2^ni, e3^ni, no^ni)
          line                        (e1^e2^ni, e1^e3^ni, e2^e3^ni, e1^no^ni, e2^no^ni, e3^no^ni)
          dualLine                    (e1^e2, e1^e3, e2^e3, e1^ni, e2^ni, e3^ni)
          plane                       (e1^e2^e3^ni, e1^e2^no^ni, e1^e3^no^ni, e2^e3^no^ni)
          dualPlane                   (e1, e2, e3, ni)
          circle                      (e2^e3^ni, e3^e1^ni, e1^e2^ni, no^e3^ni, no^e1^ni, no^e2^ni, no^e2^e3, no^e1^e3, no^e1^e2, e1^e2^e3)
          sphere                      (e1^e2^e3^ni, e1^e2^no^ni, e1^e3^no^ni, e2^e3^no^ni, e1^e2^e3^no)
          dualSphere                  (no, e1, e2, e3, ni)
          normalizedSphere            (e1^e2^e3^ni=1, e1^e2^no^ni, e1^e3^no^ni, e2^e3^no^ni, e1^e2^e3^no)
          normalizedDualSphere        (no=1, e1, e2, e3, ni)
          freeVector                  (e1^ni, e2^ni, e3^ni)
          freeBivector                (e1^e2^ni, e2^e3^ni, e3^e1^ni)
          freeTrivector               (e1^e2^e3^ni)
          tangentVector               (no^e1, no^e2, no^e3, e1^e2, e2^e3, e3^e1, e1^ni, e2^ni, e3^ni, no^ni)
          tangentBivector             (e1^e2^e3, e2^e3^ni, e3^e1^ni, e1^e2^ni, no^e3^ni, no^e1^ni, no^e2^ni, no^e2^e3, no^e1^e3, no^e1^e2)
          vectorE2GA                  (e1, e2)
          vectorE3GA                  (e1, e2, e3)
          bivectorE3GA                (e1^e2, e2^e3, e3^e1)
          TRversorLog                 (e1^e2, e2^e3, e3^e1, e1^ni, e2^ni, e3^ni)
          TRSversorLog                (e1^e2, e1^e3, e2^e3, e1^ni, e2^ni, e3^ni, no^ni)
          TRversor                    (1.0, e1^e2, e1^e3, e2^e3, e1^ni, e2^ni, e3^ni, e1^e2^e3^ni)
          TRSversor                   (1.0, e1^e2, e1^e3, e2^e3, e1^ni, e2^ni, e3^ni, no^ni, e1^e2^no^ni, e1^e3^no^ni, e2^e3^no^ni, e1^e2^e3^ni)
          evenVersor                  (1.0, no^e1, no^e2, no^e3, e1^e2, e2^e3, e3^e1, e1^ni, e2^ni, e3^ni, no^ni, e1^e2^e3^ni, e1^e2^no^ni, e1^e3^no^ni, e2^e3^no^ni, e1^e2^e3^no)
          translator                  (1.0, e1^ni, e2^ni, e3^ni)
          normalizedTranslator        (1.0=1, e1^ni, e2^ni, e3^ni)
          rotor                       (1.0, e1^e2, e2^e3, e3^e1)
          scalor                      (1.0, no^ni)

     General Outermorphism Type:
          om                         
          
     Specialized Outermorphism Types  (domain/range):       
	   omFlatPoint                (e1^ni, e2^ni, e3^ni, no^ni);
          
     Constants:
          no
          e1
          e2
          e3
          ni
	  e1ni = e1^ni 
	  e2ni = e2^ni 
	  e3ni = e3^ni 
	  noni = no^ni 
	  I3 = e1^e2^e3
	  I5 = no^e1^e2^e3^ni 
	  I5i = inverse(no^e1^e2^e3^ni)
	


Underscore constractors:

To do

Functions:

Each algebra has an implementation of the following functions.
The general multivector arguments (mv) may be replaced with specialized
multivector arguments at will.

mv lcont(mv x, mv y);          // left contraction
mv scp(mv x, mv y);            // scalar product 
mv gp(mv x, mv y);             // geometric product
mv op(mv x, mv y);             // outer product
mv add(mv x, mv y);            // addition
mv subtract(mv x, mv y);       // subtraction
mv reverse(mv x);              // reversion
mv negate(mv x);               // negation
mv dual(mv x);                 // dualization
mv undual(mv x);               // undualization
mv inverse(mv x);              // inversion
mv gradeInvolution(mv x);      // grade involution
scalar norm_e(mv x);           // Euclidean norm (sqrt of sum of squares of coordinates)
scalar norm_e2(mv x);          // Euclidean norm squared (sum of squares of coordinates)
mv unit_e(mv x);               // Returns unit under Euclidean norm 
scalar norm_r(mv x);           // 'Reverse norm' (sqrt(x . reverse(x)) * sign(x.reverse(x))
scalar norm_r2(mv x);          // 'Reverse norm squared' (x . reverse(x))
mv unit_r(mv x);               // Unit under reverse norm
mv apply_om(om x, mv y);       // Apply outermorphism to blade

The conformal algebras also have the following functions:
mv gpEM(mv x, mv y);           // geometric product (Euclidean Metric)
mv scpEM(mv x, mv y);          // scalar product (Euclidean Metric)
mv lcontEM(mv x, mv y);        // left contraction (Euclidean Metric)
mv inverseEM(mv x);            // inversion (Euclidean Metric)

Utility Functions

To do.


Operators:

The '=' operator is bound to this->set(arg)
The other operators are:

OP            Bound to:

x+y           add(x, y)
x-y           substract(x, y)
-x            negate(x)
x%y           scp(x, y)
x^y           op(x, y)
x*y           gp(x, y)
x<<y          lcont(x, y)
~x            reverse(x)
!x            inverse(x)

The binary operators may also be used in the X= form.
For example x += y is the same as x.set(add(x, y)).

	
**************************   TO BE IMPROVED    **************************

Some parts of the GA Sandbox could be improved:

-the is a lot of replicated source code in the examples. Most of it is 
user  interface stuff that I copied from example as I will writing them. 
It would be nice to isolate this code and put it in a shared library.

-the XXga_util.cpp files contain utility algorithms. But not all of them
have the same algorithms implemented. For example, c2ga_util.h lists just
a few functions, while c3ga_util.h has many functions like meet&join,
exponentiation and reciprocal frames. All XXga_util.cpp files should
have the same functionality, whenever possible.

-Left-over commented-out testing code should be removed.

-This user manual could be more extensive.

***********************   LARGE HEADER FILES    **************************

Some of the algebra implementations (libgasandbox/XXga.h and libgasandbox/XXga.cpp)
are very large, because they contains optimizations for _all_ examples.
Specifically c3ga.h is very large (about 2MB, 50.000 lines).
If this is causing you trouble, see readme.txt in ./libgasandbox_no_opt for info
on how to install the non-optimized algebras.
